[{"categories":["Kubernetes"],"content":"前言 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:1:0","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"项目地址 本次安装完全参照于 follow-me-install-kubernetes-cluster 项目 对于源项目操作进行了部分扩展的解释与优化 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:1:1","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"版本信息 当前版本基于 v1.16.x 版本 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:1:2","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"环境准备 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:2:0","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"版本信息 组件 版本 发布时间 kubernetes 1.16.6 2020-01-22 etcd 3.4.3 2019-10-24 containerd 1.3.3 2020-02-07 runc 1.0.0-rc10 2019-12-23 calico 3.12.0 2020-01-27 coredns 1.6.6 2019-12-20 dashboard v2.0.0-rc4 2020-02-06 k8s-prometheus-adapter 0.5.0 2019-04-03 prometheus-operator 0.35.0 2020-01-13 prometheus 2.15.2 2020-01-06 elasticsearch、kibana 7.2.0 2019-06-25 cni-plugins 0.8.5 2019-12-20 metrics-server 0.3.6 2019-10-15 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:2:1","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"主要配置策略 kube-apiserver： 使用节点本地 nginx 4 层透明代理实现高可用； 关闭非安全端口 8080 和匿名访问； 在安全端口 6443 接收 https 请求； 严格的认证和授权策略 (x509、token、RBAC)； 开启 bootstrap token 认证，支持 kubelet TLS bootstrapping； 使用 https 访问 kubelet、etcd，加密通信； kube-controller-manager： 3 节点高可用； 关闭非安全端口，在安全端口 10252 接收 https 请求； 使用 kubeconfig 访问 apiserver 的安全端口； 自动 approve kubelet 证书签名请求 (CSR)，证书过期后自动轮转； 各 controller 使用自己的 ServiceAccount 访问 apiserver； kube-scheduler： 3 节点高可用； 使用 kubeconfig 访问 apiserver 的安全端口； kubelet： 使用 kubeadm 动态创建 bootstrap token，而不是在 apiserver 中静态配置； 使用 TLS bootstrap 机制自动生成 client 和 server 证书，过期后自动轮转； 在 KubeletConfiguration 类型的 JSON 文件配置主要参数； 关闭只读端口，在安全端口 10250 接收 https 请求，对请求进行认证和授权，拒绝匿名访问和非授权访问； 使用 kubeconfig 访问 apiserver 的安全端口； kube-proxy： 使用 kubeconfig 访问 apiserver 的安全端口； 在 KubeProxyConfiguration 类型的 JSON 文件配置主要参数； 使用 ipvs 代理模式； 集群插件： DNS：使用功能、性能更好的 coredns； Dashboard：支持登录认证； Metric：metrics-server，使用 https 访问 kubelet 安全端口； Log：Elasticsearch、Fluend、Kibana； Registry 镜像库：docker-registry、harbor； ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:3:0","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"机器信息 IP 主机名 备注 192.168.7.200 k8s-node01 192.168.7.201 k8s-node02 192.168.7.203 k8s-node03 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:3:1","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"基础配置 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:0","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"注意事项 基础配置章节，如果没有特别指明在 k8s-node01 节点，所有操作所有节点都需要进行 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:1","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"主机名 修改机器主机名 hostnamectl set-hostname k8s-node01 hostnamectl set-hostname k8s-node02 hostnamectl set-hostname k8s-node03 修改 hosts 信息，关联节点DNS解析 cat \u003e\u003e /etc/hosts \u003c\u003cEOF 192.168.7.200 k8s-node01 192.168.7.201 k8s-node02 192.168.7.202 k8s-node03 EOF 重新连接当前 SSH 连接，主机名显示生效 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:2","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"节点免密 在 k8s-node01节点执行 保证 k8s-node01 可以免密登录到其他机器 ssh-keygen -t rsa ssh-copy-id root@k8s-node01 ssh-copy-id root@k8s-node02 ssh-copy-id root@k8s-node03 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:3","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"添加本次二进制程序存放路径到Path 以 /opt/k8s 作为部署根目录，二进制文件存放在 bin 中，添加到 Path 具体目录后续会创建 echo 'PATH=/opt/k8s/bin:$PATH' \u003e\u003e/root/.bashrc source /root/.bashrc ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:4","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"依赖安装 kube-proxy 使用 ipvs 模式安装， ipvsadm 为 ipvs 的管理工具 etcd 集群节点之间需要时间同步，chrony 用于系统时间同步 yum install -y epel-release yum install -y chrony conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget socat git ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:5","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"防火墙配置 关闭防火墙 清空 iptables 规则 设置默认转发策略 systemctl stop firewalld \u0026\u0026 systemctl disable firewalld iptables -F \u0026\u0026 iptables -X \u0026\u0026 iptables -F -t nat \u0026\u0026 iptables -X -t nat iptables -P FORWARD ACCEPT ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:6","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"关闭SWAP分区 关闭swap分区，否则可能会影响 kubelet 启动 同样可以通过设置 kubelet 启动参数 –fail-swap-on 为 false 关闭 swap 检查 swapoff -a sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:7","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"关闭 SELINUX 关闭 SELINUX 否则可能 kubelet 挂载目录报错：Permission denied setenforce 0 sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:8","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"内核调优 关闭 tcp_tw_recycle，否则与 NAT 冲突， 可能导致服务不通； cat \u003e /etc/sysctl.d/kubernetes.conf \u003c\u003cEOF net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 net.ipv4.ip_forward=1 net.ipv4.tcp_tw_recycle=0 net.ipv4.neigh.default.gc_thresh1=1024 net.ipv4.neigh.default.gc_thresh1=2048 net.ipv4.neigh.default.gc_thresh1=4096 vm.swappiness=0 vm.overcommit_memory=1 vm.panic_on_oom=0 fs.inotify.max_user_instances=8192 fs.inotify.max_user_watches=1048576 fs.file-max=52706963 fs.nr_open=52706963 net.ipv6.conf.all.disable_ipv6=1 net.netfilter.nf_conntrack_max=2310720 EOF 否则会执行 调优参数 生效的时候报错：sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directory modprobe br_netfilter sysctl -p /etc/sysctl.d/kubernetes.conf ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:9","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"设置时区以及同步 timedatectl set-timezone Asia/Shanghai systemctl enable chronyd \u0026\u0026 systemctl start chronyd 检查状态 timedatectl status 如果输出内容存在 即可 Time zone: Asia/Shanghai (CST, +0800) NTP enabled: yes NTP synchronized: yes RTC in local TZ: no 将当前 UTC 时间写入硬件时钟，并重启系统时间相关的依赖服务 timedatectl set-local-rtc 0 systemctl restart rsyslog systemctl restart crond ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:10","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"关闭无关服务 systemctl disable postfix \u0026\u0026 systemctl stop postfix ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:11","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"创建相关目录 mkdir -p /opt/k8s/{bin,work} /etc/{kubernetes,etcd}/cert ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:12","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"分发集群配置参数脚本 该操作在k8s-node1节点进行 集群配置参数脚本， 根据具体情况更改机器信息 脚本原地址 vim environment.sh #!/usr/bin/bash # 生成 EncryptionConfig 所需的加密 key export ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64) # 集群各机器 IP 数组 export NODE_IPS=(192.168.7.200 192.168.7.201 192.168.7.202) # 集群各 IP 对应的主机名数组 export NODE_NAMES=(k8s-node01 k8s-node02 k8s-node03) # etcd 集群服务地址列表 export ETCD_ENDPOINTS=\"https://192.168.7.200:2379,https://192.168.7.201:2379,https://192.168.7.202:2379\" # etcd 集群间通信的 IP 和端口 export ETCD_NODES=\"k8s-node01=https://192.168.7.201:2380,k8s-node02=https://192.168.7.201:2380,k8s-node03=https://192.168.7.202:2380\" # kube-apiserver 的反向代理(kube-nginx)地址端口 export KUBE_APISERVER=\"https://127.0.0.1:8443\" # 节点间互联网络接口名称 export IFACE=\"eth0\" # etcd 数据目录 export ETCD_DATA_DIR=\"/data/k8s/etcd/data\" # etcd WAL 目录，建议是 SSD 磁盘分区，或者和 ETCD_DATA_DIR 不同的磁盘分区 export ETCD_WAL_DIR=\"/data/k8s/etcd/wal\" # k8s 各组件数据目录 export K8S_DIR=\"/data/k8s/k8s\" ## DOCKER_DIR 和 CONTAINERD_DIR 二选一 # docker 数据目录 export DOCKER_DIR=\"/data/k8s/docker\" # containerd 数据目录 export CONTAINERD_DIR=\"/data/k8s/containerd\" ## 以下参数一般不需要修改 # TLS Bootstrapping 使用的 Token，可以使用命令 head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 生成 BOOTSTRAP_TOKEN=\"41f7e4ba8b7be874fcff18bf5cf41a7c\" # 最好使用 当前未用的网段 来定义服务网段和 Pod 网段 # 服务网段，部署前路由不可达，部署后集群内路由可达(kube-proxy 保证) SERVICE_CIDR=\"10.254.0.0/16\" # Pod 网段，建议 /16 段地址，部署前路由不可达，部署后集群内路由可达(flanneld 保证) CLUSTER_CIDR=\"172.30.0.0/16\" # 服务端口范围 (NodePort Range) export NODE_PORT_RANGE=\"30000-32767\" # kubernetes 服务 IP (一般是 SERVICE_CIDR 中第一个IP) export CLUSTER_KUBERNETES_SVC_IP=\"10.254.0.1\" # 集群 DNS 服务 IP (从 SERVICE_CIDR 中预分配) export CLUSTER_DNS_SVC_IP=\"10.254.0.2\" # 集群 DNS 域名（末尾不带点号） export CLUSTER_DNS_DOMAIN=\"cluster.local\" # 将二进制目录 /opt/k8s/bin 加到 PATH 中 export PATH=/opt/k8s/bin:$PATH 分发到各个节点 source environment.sh for node_ip in ${NODE_IPS[@]} do echo \"\u003e\u003e\u003e ${node_ip}\" scp environment.sh root@${node_ip}:/opt/k8s/bin/ ssh root@${node_ip} \"chmod +x /opt/k8s/bin/*\" done ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:13","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"升级内核 CentOS 7.x 内核 自带的 3.10.x 存在一些 Bugs 高版本的 docker(1.13之后) 启用了 3.10 kernel 实验室支持的 kernel memory account 功能（无法关闭），会在节点压力大（比如频繁启动关闭容器） 时候导致 cgroup memory leak 网络设备引用计数泄露，会导致类似于报错：“kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”; 采用升级内核至 4.4.x 以上的方法 rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm yum --enablerepo=elrepo-kernel install -y kernel-lt 检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置, 如果无输出，再尝试安装一次 设置开机启动内核 grub2-set-default 0 重启机器 sync reboot 查看内核 是否已经升级为 4.4.x版本 uname -a ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:4:14","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"根证书创建 需要使用 X509 证书对通信进行加密和认证； 使用 CloudFlare 的PKI工具集 cfssl 生成，CA证书只需要一份 本小节所有操作均在 k8s-node01 节点下执行 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:0","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"cfssl 工具集 mkdir -p /opt/k8s/cert \u0026\u0026 cd /opt/k8s/work wget https://github.com/cloudflare/cfssl/releases/download/v1.4.1/cfssl_1.4.1_linux_amd64 mv cfssl_1.4.1_linux_amd64 /opt/k8s/bin/cfssl wget https://github.com/cloudflare/cfssl/releases/download/v1.4.1/cfssljson_1.4.1_linux_amd64 mv cfssljson_1.4.1_linux_amd64 /opt/k8s/bin/cfssljson wget https://github.com/cloudflare/cfssl/releases/download/v1.4.1/cfssl-certinfo_1.4.1_linux_amd64 mv cfssl-certinfo_1.4.1_linux_amd64 /opt/k8s/bin/cfssl-certinfo chmod +x /opt/k8s/bin/* ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:1","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"创建配置文件 CA 配置文件用于配置根证书的使用场景（profile）和 具体参数（usage，过期时间，服务端认证，客户端认证，加密等） cd /opt/k8s/work cat \u003e ca-config.json \u003c\u003c EOF { \"signing\": { \"default\": { \"expiry\": \"87600h\" }, \"profiles\": { \"kubernetes\": { \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ], \"expiry\": \"876000h\" } } } } EOF 字段 含义 signing 表示该证书可以签名其他证书（ca.pem 中 CA=TRUE） server auth 表示 client 可以用该证书对 server 提供的证书进行验证 client auth 表示 server 可以用该证书对 client 提供的证书进行验证 expiry 标识证书的有效期，上述表示100年 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:2","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"创建证书签名请求文件 cd /opt/k8s/work cat \u003e ca-csr.json \u003c\u003cEOF { \"CN\": \"kubernetes-ca\", \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"BeiJing\", \"L\": \"BeiJing\", \"O\": \"k8s\", \"OU\": \"opsnull\" } ], \"ca\": { \"expiry\": \"876000h\" } } EOF 字段 含义 CN Common Name kube-apiserver 从证书中提取该字段作为请求的用户名（User Name）；浏览器通过该字段验证网站是否合法 O Organization：kube-apiserver从证书中提取该字段作为请求用户所属的组 （Group） kube-apiserver 将提取的 User、Group 作为 RBAC 授权的用户标识 注意： 不同证书的 csr 文件中的 CN, C, ST, L, O, OU 组合 必须不同，否则可能出现 PEER’S CERTIFICATE HAS AN INVAILD SINGTURE 错误； 后续创建的证书，保证CN不同以达到区分 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:3","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"生成 CA证书以及密钥 cd /opt/k8s/work cfssl gencert -initca ca-csr.json | cfssljson -bare ca ls ca* ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:4","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"分发证书 cd /opt/k8s/work source /opt/k8s/bin/environment.sh for node_ip in ${NODE_IPS[@]} do echo \"\u003e\u003e\u003e ${node_ip}\" ssh root@${node_ip} \"mkdir -p /etc/kubernetes/cert\" scp ca*.pem ca-config.json root@${node_ip}:/etc/kubernetes/cert done ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:5","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["Kubernetes"],"content":"参考 Kubernetes证书类型 ","date":"2020-06-11","objectID":"/k8s-install-hardway-1/:5:6","tags":["Kubernetes"],"title":"二进制部署Kubernetes Part1","uri":"/k8s-install-hardway-1/"},{"categories":["网络"],"content":"SoftEther VPN 简介 SoftEther VPN介绍移步此处 ","date":"2019-08-09","objectID":"/softether-vpn-split-tunnel/:0:1","tags":["VPN","网络"],"title":"Softether-VPN 拆分隧道","uri":"/softether-vpn-split-tunnel/"},{"categories":["网络"],"content":"需求来源 远程网关与本地网关 对于VPN来说，存在远程网关与本地网关的概念，以下图以SoftEther VPN 的 SecureNAT 配置为例，接入VPN后本地路由表的对比 。 如果使用远程网关，默认路由均走VPN隧道，这样VPN服务器压力较大，而且日常的网络访问都需要从VPN服务器作为出口，很显然作为远程接入公司网络该场景使用不太合理 如果使用本地网关，默认路由走的是本地的网络出口 本地网关配合静态路由 ​ 如果单纯的使用本地网关，是无法直接访问到异地的内网地址的，缺少了一步静态路由。 ​ 比如使用本地网关的情况下，公司内网存在一个地址为 192.168.7.5 , 连接VPN后，tracert一下，如图所示，经过几跳以后，在公网直接超时了。 ​ 此时我们只需要把VPN分配的虚拟网络的网关，（图中192.168.200.1 就是通过虚拟局域网前往异地内网的网关），作为本地的一条静态路由，指向如果走7网段直接通过网关192.168.200.1，添加后再次tracert 一下, 可以看到直接通过远程网关访问到了异地内网的机器 route add 192.168.7.0 mask 255.255.255.0 192.168.200.1 ​ 所以如果使用本地网关，我们需要进行一次静态路由的添加，这里存在的问题也显而易见 不添加为本机永久路由，需要每次机器重启后手动添加路由 添加为本机永久路由，可能会在某些网络环境下造成地址冲突等情况 ","date":"2019-08-09","objectID":"/softether-vpn-split-tunnel/:0:2","tags":["VPN","网络"],"title":"Softether-VPN 拆分隧道","uri":"/softether-vpn-split-tunnel/"},{"categories":["网络"],"content":"Split Tunneling ​ Split Tunneling （拆分隧道），是SoftEther-VPN中比较强悍的一个功能。具体位置在SecureNAT配置界面就可以找到。 ​ 简单来讲 拆分隧道可以理解为推送静态路由，接入 VPN 以后，server端会推送设置的静态路由到client端，断开VPN后，推送的静态路由失效，完美的解决了上述问题带来的痛点。 ​ 但是对于Softether VPN 来说，拆分隧道功能并不适合开源版本，从网上查到的信息，天朝跟岛国不可以使用该功能在内的一部分功能(当然仅限于官方下载的编译好的版本，对于自己进行源码编译是不限制的) ","date":"2019-08-09","objectID":"/softether-vpn-split-tunnel/:0:3","tags":["VPN","网络"],"title":"Softether-VPN 拆分隧道","uri":"/softether-vpn-split-tunnel/"},{"categories":["网络"],"content":"解除限制 下载源码 下载地址， 组件选择 Source Code of SoftEther VPN 如果是生产环境在用，建议下载在用版本的源码 删除限制部分代码 解压后，在以下路径中找到Server.c文件，编辑Server部分代码 /your_tar_path/src/Cedar/Server.c 可以看出Server端代码在以下 两个函数中 出现了关键词 CN 与 JP void SiGetCurrentRegion(CEDAR *c, char *region, UINT region_size) bool SiIsEnterpriseFunctionsRestrictedOnOpenSource(CEDAR *c) SiIsEnterpriseFunctionsRestrictedOnOpenSource函数中调用了SiGetCurrentRegion函数，最终的逻辑判断还是发生在SiIsEnterpriseFunctionsRestrictedOnOpenSource函数该段代码 if (StrCmpi(region, \"JP\") == 0 || StrCmpi(region, \"CN\") == 0) { ret = true; } 我们直接把 ret 的赋值改为 false；当然更改方法多种多样 编译 yum -y groupinstall \"Development Tools\" yum -y install readline-devel ncurses-devel openssl-devel ./configure make 部署 编译完成后，会在如下路径生成vpnserver 以及hamcore.se2文件 bin/vpnserver/ 直接用上述两个文件替换掉原部署的vpnserver以及hamcore.se2即可 注意: 替换前注意备份原目录，替换前注意停止vpnserver服务 测试 再次Manager连接进行路由推送，并没有弹出窗口限制 客户端拨入VPN，再次查看路由表，发现路由已经推送过来了；断开VPN后该条路由被清理 ","date":"2019-08-09","objectID":"/softether-vpn-split-tunnel/:0:4","tags":["VPN","网络"],"title":"Softether-VPN 拆分隧道","uri":"/softether-vpn-split-tunnel/"}]